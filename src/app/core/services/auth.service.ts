import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import firebase from 'firebase/compat/app';
import { Auth, signInWithPopup, FacebookAuthProvider, GoogleAuthProvider } from '@angular/fire/auth';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private userSubject = new BehaviorSubject<firebase.User | null>(null);
  public user$: Observable<firebase.User | null> = this.userSubject.asObservable();

  public isLoggedInSubject = new BehaviorSubject<boolean>(false);
  public isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();

  ngOnInit() {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      this.userSubject.next(JSON.parse(storedUser));
      this.isLoggedInSubject.next(true);
    }
  }
  
  constructor(private afAuth: AngularFireAuth, private auth: Auth, private router: Router) {
    this.afAuth.authState.subscribe(async user => {
      if (user) {
        const refreshedUser = await this.afAuth.currentUser;
        this.userSubject.next(refreshedUser);
        this.isLoggedInSubject.next(true);
        localStorage.setItem('user', JSON.stringify(refreshedUser)); // üî¥ Felhaszn√°l√≥ ment√©se
      } else {
        this.userSubject.next(null);
        this.isLoggedInSubject.next(false);
        localStorage.removeItem('user'); // üî¥ Ha nincs bejelentkezve, t√∂r√∂lj√ºk az √°llapotot
      }
    });
  }
  
  

  // ‚úÖ Google bejelentkez√©s
  async loginWithGoogle(): Promise<void> {
    try {
      const result = await this.afAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());
      if (result.user) {
        this.userSubject.next(result.user);
        console.log('Sikeres bejelentkez√©s Google-lel:', result.user);
        this.router.navigate(['/home']); // √Åtir√°ny√≠t√°s a kezd≈ëoldalra
      } else {
        console.error('Google bejelentkez√©s sikertelen.');
      }
    } catch (error) {
      console.error('Hiba a Google bejelentkez√©s sor√°n:', error);
      throw error;
    }
  }

  // ‚úÖ Facebook bejelentkez√©s
  async loginWithFacebook(): Promise<void> {
    try {
      const provider = new FacebookAuthProvider();
      provider.addScope('email');
      const result = await signInWithPopup(this.auth, provider);
      if (result.user) {
        const user = this.afAuth.currentUser;
        this.userSubject.next(await user);
        console.log('Sikeres bejelentkez√©s Facebookkal:', user);
        this.router.navigate(['/home']);
      } else {
        console.error('Facebook bejelentkez√©s sikertelen.');
      }
    } catch (error) {
      console.error('Hiba a Facebook bejelentkez√©s sor√°n:', error);
      throw error;
    }
  }

  // ‚úÖ Vend√©g bejelentkez√©s
  async loginAsGuest(): Promise<void> {
    try {
      const result = await this.afAuth.signInAnonymously();
      if (result.user) {
        this.userSubject.next(result.user);
        console.log('Sikeres vend√©g bejelentkez√©s:', result.user);
        this.router.navigate(['/home']);
      } else {
        console.error('Vend√©g bejelentkez√©s sikertelen.');
      }
    } catch (error) {
      console.error('Hiba a vend√©g bejelentkez√©s sor√°n:', error);
      throw error;
    }
  }

  // ‚úÖ Kijelentkez√©s
  async logout(): Promise<void> {
    try {
      await this.afAuth.signOut();
      this.userSubject.next(null);
      this.isLoggedInSubject.next(false);
      console.log('Sikeres kijelentkez√©s!');
      this.router.navigate(['auth/login']); // √Åtir√°ny√≠t√°s a bejelentkez≈ë oldalra
    } catch (error) {
      console.error('Hiba a kijelentkez√©s sor√°n:', error);
      throw error;
    }
  }

  // Seg√©df√ºggv√©ny a Google hiteles√≠t√©si adat beszerz√©s√©hez a megl√©v≈ë fi√≥khoz (jav√≠tott verzi√≥)
  private async getCredentialForExistingAccount(user: firebase.User): Promise<any> { // üëà Elt√°vol√≠tottuk a providerId param√©tert
    const googleProviderData = user.providerData.find(provider => provider?.providerId === 'google.com'); // üëà Keress√ºk a Google provider adatokat
    if (googleProviderData) { // üëà Ellen≈ërizz√ºk, hogy van-e Google provider adat
      const idToken = await user.getIdToken();
      const googleCredential = GoogleAuthProvider.credential(idToken);
      return googleCredential;
    }
    return null;
  }

  public getUserEmail(user: firebase.User | null): string | null { // ‚úÖgetUserEmail f√ºggv√©ny
    if (!user) {
      return null; // Ha nincs felhaszn√°l√≥, akkor nincs email c√≠m
    }

    if (user.email) {
      return user.email; // Ha k√∂zvetlen√ºl van email c√≠m, akkor haszn√°ljuk azt
    }

    if (user.providerData && user.providerData.length > 0) {
      // V√©gigmegy√ºnk a providerData t√∂mb√∂n, √©s megkeress√ºk az email c√≠met
      for (const provider of user.providerData) {
        if (provider && provider.email) {
          return provider.email; // Ha tal√°lunk email c√≠met provider adatban, akkor haszn√°ljuk azt
        }
      }
    }

    return null; // Ha semhol nem tal√°lunk email c√≠met, akkor null-t adunk vissza
  }
}
